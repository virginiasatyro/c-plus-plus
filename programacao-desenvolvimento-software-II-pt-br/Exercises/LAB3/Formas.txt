==============================================
quadrado.h

#ifndef QUADRADO_H_INCLUDED
#define QUADRADO_H_INCLUDED
#include "forma2d.h"

class Quadrado:public Forma2D{
private:
    std::string _cor;
    double _lado;
public:
    Quadrado(std::string cor, double _lado);
    virtual double get_area() override;
    virtual double get_perimetro() override;
};


#endif // QUADRADO_H_INCLUDED

==================================================

quadrado.cpp

#include "quadrado.h"

Quadrado::Quadrado(std::string cor,double lado): _cor(cor), _lado(lado){
    set_nome("quadrado");
    set_cor(_cor);
}

double Quadrado::get_area(){
    return _lado*_lado;
}

double Quadrado::get_perimetro(){
    return _lado*4;
}

============================================
forma.h

#ifndef FORMAS_H_INCLUDED
#define FORMAS_H_INCLUDED
#include <string>
#include <iostream>

class Forma{
private:
    std::string _nome;
    std::string _cor;
public:
    virtual std::string get_nome(){
        return _nome;
    }
    virtual std::string get_cor(){
        return _cor;
    }
    void set_nome(std::string nome){
        _nome = nome;
    }
    void set_cor(std::string cor){
        _cor = cor;
    }
};

#endif

====================================================================

forma2d.h

#ifndef FORMA2D_H_INCLUDED
#define FORMA2D_H_INCLUDED
#include "forma.h"

class Forma2D:public Forma{
private:
    double _area;
    double _perimetro;
public:
    virtual double get_area(){
        return _area;
    }
    virtual double get_perimetro(){
        return _perimetro;
    }
};
#endif

========================================================

forma3d.h

#ifndef FORMA3D_H_INCLUDED
#define FORMA3D_H_INCLUDED
#include "forma.h"




class Forma3D:public Forma{
private:
    double _volume;
public:
    virtual double get_volume(){
        return _volume;
    }
};


====================================================

triangulo.h

#ifndef TRIANGULO_H_INCLUDED
#define TRIANGULO_H_INCLUDED
#include "forma2d.h"


class Triangulo:public Forma2D{
private:
    std::string _cor;
    double _lado1;
    double  _lado2;
    double  _lado3;
public:
    Triangulo(std::string cor, double lado1, double lado2, double lado3);
    virtual double get_area() override;
    virtual double get_perimetro() override;
};


#endif

=============================================================

triangulo.cpp 


#include <cmath>

#include "triangulo.h"


Triangulo::Triangulo(std::string cor,double lado1,double lado2,double lado3): _cor(cor),_lado1(lado1),_lado2(lado2),_lado3(lado3){
    
	set_nome("triangulo");
    
	set_cor(_cor);

}


double Triangulo::get_area(){
    
	double p;
    
	p = (_lado1 + _lado2 + _lado3)/2;
    
	return sqrt(p*(p - _lado1)*(p - _lado2)*(p - _lado3));

}


double Triangulo::get_perimetro(){
    
	return _lado1 + _lado2 + _lado3;

}

==========================================================
circulo.cpp

#include <cmath>

#include "circulo.h"


Circulo::Circulo(std::string cor, double raio): _cor(cor),_raio(raio){

        set_nome("circulo");
    
	set_cor(_cor);

}


double Circulo::get_area(){
    
	return 3.14*(_raio*_raio);

}


double Circulo::get_perimetro(){
    
	return 2*3.14*_raio;

}

==========================================================
circulo.h

#ifndef CIRCULO_H_INCLUDED

#define CIRCULO_H_INCLUDED

#include "forma2d.h"


class Circulo:public Forma2D{

private:

     std::string _cor;

    double _raio;

public:

    Circulo(std::string cor, double raio);

    virtual double get_area() override;

    virtual double get_perimetro() override;

};




#endif

=============================================
esfera.cpp

#include <cmath>

#include "esfera.h"


Esfera::Esfera(std::string cor, double raio): _cor(cor),_raio(raio){

    set_nome("esfera");

    set_cor(_cor);

}


double Esfera::get_volume(){

    return (4*3.14*(_raio*_raio*_raio))/3;

}

==================================================

esfera.h

#ifndef ESFERA_H_INCLUDED

#define ESFERA_H_INCLUDED

#include "forma3d.h"


class Esfera:public Forma3D{

private:

    std::string _cor;

    double _raio;


public:

    Esfera(std::string cor, double raio);

    virtual double get_volume() override;

};



#endif

===================================================

cubo.h

#include "cubo.h"


Cubo::Cubo(std::string cor, double lado): _cor(cor),_lado(lado){

    set_nome("cubo");

    set_cor(_cor);

}


double Cubo::get_volume(){

    return _lado*_lado*_lado;

}

==================================================

cubo.cpp

#ifndef CUBO_H_INCLUDED

#define CUBO_H_INCLUDED

#include "forma3d.h"



class Cubo:public Forma3D{

private:

    std::string _cor;

    double _lado;

public:

    Cubo(std::string cor, double lado);

    virtual double get_volume() override;

};


#endif

=======================================================